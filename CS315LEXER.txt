{\rtf1\ansi\ansicpg1254\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red27\green31\blue35;\red255\green255\blue255;
\red27\green31\blue35;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c14207\c16177\c18085;\cssrgb\c100000\c100000\c100000\c0;
\cssrgb\c14207\c16177\c18085;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 %option main\
digit [0-9]\
sign [+-]\
%%\

\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 var printf("VARIABLE");\
if printf("IF");\
[(]\outl0\strokewidth0  printf("LP");\
[)] printf("RP");\
[;] printf("SEMICLN");\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \outl0\strokewidth0 [//] printf("LINE_CMMNT");\
\outl0\strokewidth0 [\outl0\strokewidth0 \strokec2 /*\outl0\strokewidth0 ] printf("BLCK_CMMNT_STRT");\
[*/] printf("BLCK_CMMNT_END");\outl0\strokewidth0 \
\outl0\strokewidth0 [\outl0\strokewidth0 \strokec2 =\outl0\strokewidth0 ]\outl0\strokewidth0 \strokec2  printf("ASGNMNT_OP");\
\outl0\strokewidth0 [\outl0\strokewidth0 \strokec2 .\outl0\strokewidth0 ]\outl0\strokewidth0 \strokec2  printf("DOT");\
\outl0\strokewidth0 [\cf3 \cb4 \outl0\strokewidth0 \strokec3 \\"\cf2 \cb1 \outl0\strokewidth0 ]\cf3 \cb4 \outl0\strokewidth0 \strokec3  printf("STRING_IDNT");\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb1 \outl0\strokewidth0 [\cf5 \cb4 \\'\cf2 \cb1 ]\cf5 \cb4  printf("CHAR_IDNT");\
\cf2 \cb1 [\cf5 \cb4 ||\cf2 \cb1 ]\cf5 \cb4  printf("OR\cf5 _OP\cf5 ");\
\cf2 \cb1 [\cf5 \cb4 &&\cf2 \cb1 ]\cf5 \cb4  printf("AND\cf5 _OP\cf5 ");\
\cf2 \cb1 [\cf5 \cb4 !\cf2 \cb1 ]\cf5 \cb4  printf("NOT_OP");\
\cf2 \cb1 [\cf5 \cb4 ==\cf2 \cb1 ]\cf5 \cb4  printf("EQUAL_OP");\
\cf2 \cb1 [\cf5 \cb4 !=\cf2 \cb1 ]\cf5 \cb4  printf("NOT_EQUAL_OP");\
\cf2 \cb1 [\cf5 \cb4 <\cf2 \cb1 ]\cf5 \cb4  printf("LESS_T_OP");\
\cf2 \cb1 [\cf5 \cb4 >\cf2 \cb1 ]\cf5 \cb4  printf("GREATER_T_OP");\
\cf2 \cb1 [\cf5 \cb4 <=\cf2 \cb1 ]\cf5 \cb4  printf("LT_OR_EQUAL_OP");\
\cf2 \cb1 [\cf5 \cb4 >=\cf2 \cb1 ]\cf5 \cb4  printf("GT_OR_EQUAL_OP");\
\cf2 \cb1 [\cf5 \cb4 *\cf2 \cb1 ]\cf5 \cb4  printf("MUL_OP");\
\cf2 \cb1 [\cf5 \cb4 /\cf2 \cb1 ]\cf5 \cb4  printf("DIV_OP");\
\cf2 \cb1 [\cf5 \cb4 +\cf2 \cb1 ]\cf5 \cb4  printf("ADD_OP");\
\cf2 \cb1 [\cf5 \cb4 -\cf2 \cb1 ]\cf5 \cb4  printf("SUB_OP");\
\cf2 \cb1 [\cf5 \cb4 %\cf2 \cb1 ]\cf5 \cb4  printf("MOD_OP");\
\cf2 \cb1 [\cf5 \cb4 ,\cf2 \cb1 ]\cf5 \cb4  printf("COMMA");\
\cf2 \cb1 [-] printf(" ");\cf5 \cb4 \
\pard\pardeftab720\partightenfactor0
\cf5 input printf("INPUT_CALL");\
print printf("OUTPUT_CALL");\
while printf("WHILE_LOOP");\
for printf("FOR_LOOP");\
takeoff() printf("TAKEOFF_FNCTION");\
land\cf5 () printf("LAND_FNCTION");\
flip_left() printf("FLIP_LFT_FNCTION);\
flip_right() printf("FLIP_RIGHT_FNCTION);\
flip_back() printf("FLIP_BACK_FNCTION);\
flip_front() printf("FLIP_FRONT_FNCTION);\
go() printf("GO_FNCTION");\
go_up() printf("GO_UP_FNCTION");\
go_down() printf("GO_DOWN_FNCTION");\
go_forward() printf("GO_FRWRD_FNCTION");\
go_backward() printf("GO_BCKWRD_FNCTION");\
go_left() printf("GO_LEFT_FNCTION");\
go_right() printf("GO_RIGHT_FNCTION");}