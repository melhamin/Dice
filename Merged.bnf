=========== Program =============
<Program> ::= <statement_List>
<statement_List> ::= <statement>
                   | <statement_List> ; <statement>
<statement> ::= <declaration_statement> 
              | <assignment_statement>
              | <function_call>
              | <conditional_statement>
              | <loop_statement>

=========== statements ==========
<declaration_statement> ::= <variable> <identifier>
                          | <variable> <identifier> <assignment_operator> <identifier>
			              | <variable> <identifier> <assignment_operator> <expression>
  
<assignment_statement> ::= <identifier> <assignment_operator> <identifier>
                         | <identifier> <assignment_operator> <expression>

<conditional_statement> ::= if <LP> <expression> <RP> <statement>
					      | if <LP> <expression> <RP> <statement> else <statement> 

=========== expressions =========
<expression>  ::= <arithmetic> | <relational>

<arithmetic> ::= <arithmetic> <add_op> <mult_div>
               | <arithmetic> <sub_op> <mult_div>
               | <mult_div>

<mult_div> ::= <mult_div> <mul_op> <in_paranthesis>
             | <mult_div> <div_op> <in_paranthesis>
             | <mult_div> <mod_op> <in_paranthesis>
             | <in_paranthesis>

<in_paranthesis> ::= <LP> <arithmetic> <RP>
                   | <number>
                   | <identifier>

<relational> ::= <arithmetic> <relational_operator> <arithmetic>

<relational_operator> ::= <LT>
                        | <LTE>
                        | <GT>
                        | <GTE>
                        | <and>
                        | <or>
                        | <equal_to>
                        | <not_equal_to>                     

=============== Function Declaration and Function Call ===============
<function_definition> ::= <function_header> <function_body>
<function_header>     ::= <return_type> <function_signature>
<return_type>         ::= void
                        | <type>
<function_signature>  ::= <function_name> <LP><parameter_list> | <empty><RP>    
<parameter_list>      ::= <parameter_list> <comma> <parameter> 
                        | <parameter>     
<parameter>           ::= <type> <identifier>
<function_body>       ::= <block> | <semicolon>
<block>               ::= <LCB> <statement_List> | <empty> <RCB>
<function_call>       ::= <function_name> <LP> <argument_list> | <empty> <RP>
<function_name>       ::= <identifier>

============== Input and Output Statement ================                     
<input_statement>     ::= input<LP> <function_call> | <sentence> | <empty> <RP>  \\ todo
<output_statement>    ::= print<LP> <function_call> | <expression> | <sentence> | <empty> <RP> \\ todo

============== Loops ===============
<loop_statement> ::= <while> | <for>

<while> ::= while <LP> <conditional_statement> <RP> <statement>

<for> ::= for <LP> <expression> ; <conditional_statement> ; <expression> <RP> <statement>  

============= Comments ==============
<line_comment>        ::= <line_comment_ident> <line_comment> <sentence>
                      ::= <line_comment_ident> <sentence>
<block_comment>       ::= <block_comment_start> word <block_comment_end>
                      ::= <block_comment_start> <block_comment> <word> <block_comment_end>    

=================== Types ===================
<type>      ::= string
            | int
            | double
            | bool

<string>              ::= <string_ident><sentence><string_ident>
<bool>                ::= <true> | <false>
<int>                 ::= <int> <digit>
                        | <digit>
<double>              ::= <int>?.<int>
                        | <int>?.<digit>
                        | <digit>

============= numbers and sentences =============
<number>              ::= <digit> 
                        | <number> <digit>

<digit>               ::= 0 | <non_zero_digit>    

<sentence>            ::= <sentence><word> 
                        | <sentence><digit>
                        | <word> 

<word>                ::= <alphabet>|<digit>                                            
                        | <word> <alphabet>|<digit>   

<identifier>          ::= <identifier> <alphabet> 
                        | <identifier> <number>
                        | <alphabet>

<alphanumeric>        ::= <alphabet> <alphanumeric> 
                        | <digit> <alphanumeric>
                        | <digit>
                        | <alphabet>

================== Terminals ====================

<alphabet>            ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q |
                          r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | 
                          I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z  
<non_zero_digit>      ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9  
<variable>            ::= var
<line_comment_ident>  ::= //
<block_comment_start> ::= /* 
<block_comment_end>   ::= */
<symbol>              ::= <LP> 
                        | <RP> 
                        | <semicolon> 
                        | <underscore> 
                        | <assignment_operator> 
                        | <dot> 
                        | <space>
                        | <LCB> 
                        | <RCB> 
                        | <string_ident> 
                        | <char_ident>
<LP>                  ::= (
<RP>                  ::= )
<LCB>                 ::= {
<RCB>                 ::= }
<semicolon>           ::= ;                        
<assignment_operator> ::= =                        
<dot>                 ::= .                      
<space>               ::= " "
<string_ident>        ::= "\""
<char_ident>          ::= "\'"
<or>                  ::= ||
<and>                 ::= &&
<not>                 ::= !
<equal_to>            ::= ==
<not_equal_to>        ::= !=
<LT>                  ::= <
<GT>                  ::= >
<LTE>                 ::= <=
<GTE>                 ::= >=
<mul_op>              ::= * 
<div_op>              ::= /
<add_op>              ::= +
<sub_op>              ::= -
<mod_op>              ::= %
<comma>               ::= ,