# Non-Terminals
<Program> ::= <statement_List>

<statement_List> ::= <statement>
                   | <statement_List> ; <statement>

<statement> ::= <declaration_statement> 
              | <assignment_statement>
              | <function_call>
              | <conditional_statement>
              | <loop_statement>

<declaration_statement> ::= var <identifier>
                          | var <identifier> <assignment_operator> <identifier>
			              | var <identifier> <assignment_operator> <expression>
  
<assignment_statement> ::= <identifier> <assignment_operator> <identifier>
                         | <identifier> <assignment_operator> <expression>

<expression>  ::= <arithmetic> | <relational>

<arithmetic> ::= <arithmetic> + <mult_div>
               | <arithmetic> - <mult_div>
               | <mult_div>

<mult_div> ::= <mult_div> * <in_paranthesis>
             | <mult_div> / <in_paranthesis>
             | <mult_div> % <in_paranthesis>
             | <in_paranthesis>

<in_paranthesis> ::= ( <arithmetic> )
                   | <number>
                   | <identifier>

<relational> ::= <arithmetic> < <arithmetic>
               | <arithmetic> <= <arithmetic>
               | <arithmetic> > <arithmetic>
               | <arithmetic> >= <arithmetic>
               | <arithmetic> == <arithmetic>
               | <arithmetic> != <arithmetic>

<loops> ::= <while> | <for>

<while> ::= while ( <conditional_statement> ) <statement>

<for> ::= for ( <expression> ; <conditional_statement> ; <expression> ) <statement>

<conditional_statement> ::= if ( <expression> ) <statement>
					      | if ( <expression> ) <statement> else <statement>                 

## Terminals
<identifier> ::= <char>+(<char>|<digit>)*

<number> ::= <const>

<const> ::= <id>

<alphabet>            ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q |
                          r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

<number>              ::= <digits>                            

<digits>              ::= <digit> 
                        | <digits> <digit>

<digit>               ::= 0 | non_zero_digit    

<alphanumeric>        ::= <alphabet> <alphanumeric> 
                        | <digit> <alphanumeric>

<word>                ::= {<digit>|<alphabet>}                                              
                        | <word> {<digit>|<alphabet>}  

<variable>            ::= var                        

<line_comment>        ::= //word
                      ::= //<line_comment> <word>

<block_comment>       ::= /* word */
                      ::= /* <block_comment> <word> */ 